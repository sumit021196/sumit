{"version":3,"file":"ResetPassword-397f057b.js","sources":["../../src/pages/ResetPassword.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams, Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { \n  Container, \n  Box, \n  Typography, \n  TextField, \n  Button, \n  Link, \n  Paper, \n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthProvider';\n\nexport default function ResetPassword() {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isValidLink, setIsValidLink] = useState(true);\n  \n  const { updatePassword } = useAuth();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  // Check if the reset link is valid when component mounts\n  useEffect(() => {\n    const accessToken = searchParams.get('access_token');\n    if (!accessToken) {\n      setIsValidLink(false);\n      setError('Invalid or expired reset link');\n    }\n  }, [searchParams]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!password || !confirmPassword) {\n      setError('Please fill in all fields');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n    setMessage('');\n\n    try {\n      const { error } = await updatePassword(password);\n      if (error) throw error;\n      \n      setMessage('Your password has been reset successfully. You can now sign in with your new password.');\n      \n      // Redirect to login after a short delay\n      setTimeout(() => {\n        navigate('/login');\n      }, 3000);\n      \n    } catch (err) {\n      setError(err.message || 'Failed to reset password. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  if (!isValidLink) {\n    return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Paper \n            elevation={3} \n            sx={{ \n              p: 4, \n              width: '100%',\n              borderRadius: 2,\n            }}\n          >\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n            <Typography variant=\"body1\" align=\"center\" sx={{ mb: 2 }}>\n              The password reset link is invalid or has expired.\n            </Typography>\n            <Box sx={{ textAlign: 'center', mt: 3 }}>\n              <Link \n                component={RouterLink} \n                to=\"/forgot-password\" \n                variant=\"body1\"\n              >\n                Request a new reset link\n              </Link>\n            </Box>\n          </Paper>\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Paper \n          elevation={3} \n          sx={{ \n            p: 4, \n            width: '100%',\n            borderRadius: 2,\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\" align=\"center\" gutterBottom>\n            Reset Your Password\n          </Typography>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ mb: 3 }}>\n            Please enter your new password below.\n          </Typography>\n          \n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n          \n          {message && (\n            <Alert severity=\"success\" sx={{ mb: 2 }}>\n              {message}\n            </Alert>\n          )}\n\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"New Password\"\n              type={showPassword ? 'text' : 'password'}\n              id=\"password\"\n              autoComplete=\"new-password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={togglePasswordVisibility}\n                    edge=\"end\"\n                  >\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                ),\n              }}\n              sx={{ mb: 2 }}\n            />\n\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"confirmPassword\"\n              label=\"Confirm New Password\"\n              type={showPassword ? 'text' : 'password'}\n              id=\"confirmPassword\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              sx={{ mb: 2 }}\n            />\n\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={isLoading}\n              sx={{ mt: 2, mb: 2, py: 1.5 }}\n            >\n              {isLoading ? (\n                <CircularProgress size={24} color=\"inherit\" />\n              ) : (\n                'Reset Password'\n              )}\n            </Button>\n\n            <Box sx={{ textAlign: 'center', mt: 2 }}>\n              <Link \n                component={RouterLink} \n                to=\"/login\" \n                variant=\"body2\"\n              >\n                Back to Sign In\n              </Link>\n            </Box>\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}\n"],"names":["ResetPassword","password","setPassword","useState","confirmPassword","setConfirmPassword","showPassword","setShowPassword","error","setError","message","setMessage","isLoading","setIsLoading","isValidLink","setIsValidLink","updatePassword","useAuth","searchParams","useSearchParams","navigate","useNavigate","useEffect","handleSubmit","e","err","togglePasswordVisibility","jsx","Container","Box","jsxs","Paper","Typography","Alert","TextField","VisibilityOff","Visibility","Button","CircularProgress","Link","RouterLink"],"mappings":"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"}