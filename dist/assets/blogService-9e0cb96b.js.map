{"version":3,"file":"blogService-9e0cb96b.js","sources":["../../node_modules/@mui/icons-material/AccessTime.js","../../node_modules/@mui/icons-material/Visibility.js","../../src/services/blogService.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'AccessTime');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","import { supabase } from '../supabaseClient';\n\n/**\n * Blog Service for fetching and managing blog posts\n * Handles all Supabase interactions for blog functionality\n */\n\n/**\n * Fetch all published blog posts with pagination\n * @param {number} limit - Number of posts to fetch\n * @param {number} offset - Offset for pagination\n * @param {string} category - Optional category filter\n * @returns {Promise<{posts: Array, total: number}>}\n */\nexport const fetchBlogPosts = async (limit = 10, offset = 0, category = null) => {\n  try {\n    let query = supabase\n      .from('blog_posts')\n      .select('*', { count: 'exact' })\n      .eq('is_published', true)\n      .order('published_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (category) {\n      query = query.eq('category', category);\n    }\n\n    const { data, error, count } = await query;\n\n    if (error) throw error;\n\n    return {\n      posts: data || [],\n      total: count || 0\n    };\n  } catch (error) {\n    console.error('Error fetching blog posts:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch a single blog post by slug\n * @param {string} slug - URL slug of the blog post\n * @returns {Promise<Object>}\n */\nexport const fetchBlogPostBySlug = async (slug) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select('*')\n      .eq('slug', slug)\n      .eq('is_published', true)\n      .single();\n\n    if (error) throw error;\n\n    // Increment view count\n    if (data) {\n      await incrementViewCount(data.id);\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Error fetching blog post:', error);\n    throw error;\n  }\n};\n\n/**\n * Increment view count for a blog post\n * @param {string} postId - UUID of the blog post\n */\nconst incrementViewCount = async (postId) => {\n  try {\n    await supabase.rpc('increment_views', { post_id: postId });\n  } catch (error) {\n    console.error('Error incrementing view count:', error);\n  }\n};\n\n/**\n * Fetch featured blog posts\n * @param {number} limit - Number of featured posts\n * @returns {Promise<Array>}\n */\nexport const fetchFeaturedPosts = async (limit = 3) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select('*')\n      .eq('is_published', true)\n      .eq('is_featured', true)\n      .order('published_at', { ascending: false })\n      .limit(limit);\n\n    if (error) throw error;\n\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching featured posts:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch all blog categories\n * @returns {Promise<Array>}\n */\nexport const fetchCategories = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_categories')\n      .select('*')\n      .order('name');\n\n    if (error) throw error;\n\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    throw error;\n  }\n};\n\n/**\n * Search blog posts by keyword\n * @param {string} searchTerm - Search keyword\n * @returns {Promise<Array>}\n */\nexport const searchBlogPosts = async (searchTerm) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select('*')\n      .eq('is_published', true)\n      .or(`title.ilike.%${searchTerm}%,content.ilike.%${searchTerm}%,excerpt.ilike.%${searchTerm}%`)\n      .order('published_at', { ascending: false })\n      .limit(20);\n\n    if (error) throw error;\n\n    return data || [];\n  } catch (error) {\n    console.error('Error searching blog posts:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch related posts based on tags\n * @param {Array} tags - Array of tags\n * @param {string} excludeId - Post ID to exclude (current post)\n * @param {number} limit - Number of related posts\n * @returns {Promise<Array>}\n */\nexport const fetchRelatedPosts = async (tags, excludeId, limit = 3) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select('*')\n      .eq('is_published', true)\n      .neq('id', excludeId)\n      .contains('tags', tags)\n      .order('published_at', { ascending: false })\n      .limit(limit);\n\n    if (error) throw error;\n\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching related posts:', error);\n    return [];\n  }\n};\n\n/**\n * Submit a comment on a blog post\n * @param {Object} commentData - Comment data\n * @returns {Promise<Object>}\n */\nexport const submitComment = async (commentData) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_comments')\n      .insert([{\n        blog_post_id: commentData.postId,\n        author_name: commentData.name,\n        author_email: commentData.email,\n        content: commentData.content,\n        is_approved: false\n      }]);\n\n    if (error) throw error;\n\n    return { success: true, data };\n  } catch (error) {\n    console.error('Error submitting comment:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch popular posts by view count\n * @param {number} limit - Number of posts\n * @returns {Promise<Array>}\n */\nexport const fetchPopularPosts = async (limit = 5) => {\n  try {\n    const { data, error } = await supabase\n      .from('blog_posts')\n      .select('id, title, slug, views_count, reading_time')\n      .eq('is_published', true)\n      .order('views_count', { ascending: false })\n      .limit(limit);\n\n    if (error) throw error;\n\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching popular posts:', error);\n    return [];\n  }\n};\n"],"names":["_interopRequireDefault","require$$0","AccessTime","default_1","_createSvgIcon","require$$1","_jsxRuntime","require$$2","Visibility","fetchBlogPosts","limit","offset","category","query","supabase","data","error","count","fetchBlogPostBySlug","slug","incrementViewCount","postId","fetchFeaturedPosts","fetchCategories","searchBlogPosts","searchTerm","fetchRelatedPosts","tags","excludeId"],"mappings":"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","x_google_ignoreList":[0,1]}