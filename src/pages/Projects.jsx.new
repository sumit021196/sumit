import React, { useState, useEffect, useCallback } from 'react';
import { Box, Container, Typography, Grid, CircularProgress } from '@mui/material';
import { motion } from 'framer-motion';
import InfiniteScroll from 'react-infinite-scroll-component';

// Components
import ProjectCard from '../components/projects/ProjectCard';
import ProjectDialog from '../components/projects/ProjectDialog';
import GithubSection from '../components/projects/GithubSection';
import ProjectLoadingSkeleton from '../components/projects/ProjectLoadingSkeleton';

// Format GitHub repository data to match our project structure
const formatRepoData = (repo) => ({
  id: repo.id,
  title: repo.name.replace(/-/g, ' ').replace(/(^|\s)\S/g, t => t.toUpperCase()),
  description: repo.description || 'No description provided.',
  image: `https://opengraph.githubassets.com/1/${repo.full_name}`,
  technologies: repo.topics && repo.topics.length > 0 
    ? repo.topics.slice(0, 3).map(topic => topic.charAt(0).toUpperCase() + topic.slice(1))
    : ['GitHub', 'Code'],
  github: repo.html_url,
  demo: repo.homepage || `https://github.com/${repo.full_name}`,
  details: repo.description || 'No detailed description available.',
  stars: repo.stargazers_count,
  forks: repo.forks_count,
  language: repo.language || 'Code',
  updated: new Date(repo.updated_at).toLocaleDateString(),
  fullData: repo
});

const Projects = () => {
  const [repos, setRepos] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(true);
  const [selectedProject, setSelectedProject] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);

  const GITHUB_USERNAME = 'sumit021196';
  const PER_PAGE = 9;

  const fetchRepos = useCallback(async () => {
    try {
      setLoading(true);
      const response = await fetch(
        `https://api.github.com/users/${GITHUB_USERNAME}/repos?sort=updated&per_page=${PER_PAGE}&page=${page}`
      );
      
      if (!response.ok) throw new Error('Failed to fetch repositories');
      
      const data = await response.json();
      
      if (data.length === 0) {
        setHasMore(false);
      } else {
        setRepos(prevRepos => [...new Map([...prevRepos, ...data].map(item => [item.id, item])).values()]);
      }
    } catch (error) {
      console.error('Error fetching repositories:', error);
    } finally {
      setLoading(false);
    }
  }, [page]);

  useEffect(() => {
    fetchRepos();
  }, [fetchRepos]);

  const loadMore = () => {
    setPage(prevPage => prevPage + 1);
  };

  const handleOpen = (project) => {
    setSelectedProject(project);
    setOpenDialog(true);
  };

  const handleClose = () => {
    setOpenDialog(false);
    setSelectedProject(null);
  };

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { 
      opacity: 1, 
      y: 0,
      transition: {
        duration: 0.5,
        ease: 'easeOut'
      }
    },
    hover: {
      y: -5,
      transition: {
        duration: 0.3,
        ease: 'easeInOut'
      }
    }
  };

  return (
    <Box
      component={motion.div}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      sx={{ minHeight: '100vh' }}
    >
      <Box
        sx={{
          py: { xs: 4, sm: 6, md: 8 },
          px: { xs: 2, sm: 3 },
        }}
      >
        <Container maxWidth="lg" sx={{ px: { xs: 0, sm: 2 } }}>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <Typography
              variant="h3"
              component="h1"
              sx={{
                fontWeight: 700,
                mb: 1,
                fontSize: { xs: '2rem', sm: '2.5rem', md: '3rem' },
                textAlign: 'center',
                background: 'linear-gradient(90deg, #3f51b5 0%, #9c27b0 100%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text',
              }}
            >
              My Projects
            </Typography>
            <Typography
              variant="subtitle1"
              color="text.secondary"
              sx={{
                textAlign: 'center',
                maxWidth: '700px',
                mx: 'auto',
                mb: 4,
                fontSize: { xs: '1rem', sm: '1.1rem' },
              }}
            >
              Here are some of my recent projects. Each project is built with a focus on clean code, modern design, and great user experience.
            </Typography>
          </motion.div>

          {loading ? (
            <ProjectLoadingSkeleton count={6} />
          ) : (
            <InfiniteScroll
              dataLength={repos.length}
              next={loadMore}
              hasMore={hasMore}
              loader={
                <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
                  <CircularProgress />
                </Box>
              }
              endMessage={
                <Typography
                  variant="body1"
                  color="text.secondary"
                  align="center"
                  sx={{ mt: 4, mb: 2 }}
                >
                  You've seen all my projects! ðŸŽ‰
                </Typography>
              }
              style={{ overflow: 'visible' }}
            >
              <motion.div
                variants={container}
                initial="hidden"
                animate="show"
              >
                <Grid container spacing={{ xs: 2, sm: 3, md: 4 }}>
                  {repos.map((repo, index) => {
                    const project = formatRepoData(repo);
                    return (
                      <Grid item xs={12} sm={6} md={4} key={index}>
                        <motion.div variants={item}>
                          <ProjectCard 
                            project={project} 
                            onOpen={handleOpen}
                          />
                        </motion.div>
                      </Grid>
                    );
                  })}
                </Grid>
              </motion.div>
            </InfiniteScroll>
          )}
        </Container>
        
        <GithubSection githubUsername={GITHUB_USERNAME} />

        <ProjectDialog 
          open={openDialog} 
          project={selectedProject} 
          onClose={handleClose} 
        />
      </Box>
    </Box>
  );
};

export default Projects;
